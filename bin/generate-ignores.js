#!/usr/bin/env node
/**
 * Generate Ignore Files Utility
 * 
 * This script generates various ignore files (.gitignore, .npmignore, .codeiumignore, .cursorignore)
 * by combining modular ignore rules from .config/filelists/.
 * 
 * Each output file is created by combining specific sets of ignore rules according to the CONFIG
 * object below. This allows for centralized management of ignore patterns while maintaining
 * different ignore rules for different tools.
 * 
 * Usage:
 *   node bin/generate-ignores.js
 * 
 * Configuration:
 * - Edit the CONFIG object to change which ignore rules are included in each output file
 * - Place ignore patterns in .config/filelists/{category}.ignorefile
 * - Markdown documentation can be placed in .config/filelists/{category}.ignorefile.md
 */

const fs = require('fs');
const path = require('path');

/**
 * Configuration for ignore file generation
 * 
 * Each key represents an output ignore file to be generated.
 * For each output file, you can specify:
 * - include: Array of rule categories to include (without .ignorefile extension)
 * - exclude: Array of rule categories to explicitly exclude
 * 
 * Available rule categories:
 * - security: Sensitive files and credentials
 * - dev: Development source code and tests
 * - garbage: System and temporary files
 * - ai: AI-specific ignores
 */
const CONFIG = {
  // VCS Ignore Files (.gitignore)
  '.gitignore': {
    include: ['vcs', 'security'],
    exclude: ['ai', 'packaging']
  },
  '.terraformignore': {
    include: ['vcs', 'security'],
    exclude: ['ai', 'packaging']
  },
  // Packaging Ignore Files (.npmignore)
  '.npmignore': {
    include: ['packaging', 'vcs', 'security'],
    exclude: ['ai']
  },
  // AI Ignore Files (.codeiumignore, .cursorignore)
  '.codeiumignore': {
    include: ['ai', 'vcs', 'security'],
    exclude: ['packaging']
  },
  '.cursorignore': {
    include: ['ai', 'vcs', 'security'],
    exclude: ['packaging']
  },
  '.chezmoiignore': {
    include: ['vcs', 'security'],
    exclude: ['ai', 'packaging']
  }
};

const IGNORE_DIR = path.join(__dirname, '..', 'filelists');

/**
 * Reads a file and returns its content with a header
 */
function readIgnoreFile(baseName, isMarkdown = false) {
  const ext = isMarkdown ? '.ignorefile.md' : '.ignorefile';
  const filePath = path.join(IGNORE_DIR, `${baseName}${ext}`);
  
  try {
    const content = fs.readFileSync(filePath, 'utf8').trim();
    if (!content) return '';
    
    // Skip header for markdown files as they have their own template
    if (isMarkdown) return content;
    
    const header = `# ===== ${baseName.toUpperCase()} RULES =====\n`;
    return `\n${header}${content}\n`;
  } catch (err) {
    if (err.code !== 'ENOENT') {
      console.warn(`Warning: Error reading ${filePath}:`, err.message);
    }
    return '';
  }
}

/**
 * Generates combined ignore file content from multiple sources
 */
function generateCombinedContent(files) {
  const now = new Date();
  const timestamp = now.toISOString();
  
  // Special handling for markdown files
  if (files.includes('ai') && files.length === 1) {
    let content = readIgnoreFile('ai', true);
    return content.replace('{{GENERATED_TIMESTAMP}}', timestamp);
  }
  
  let content = `# This file is autogenerated - DO NOT EDIT DIRECTLY\n`;
  content += `# Generated: ${timestamp}\n`;
  content += `# Source files: ${files.join(', ')}\n\n`;

  // Add content from each file
  for (const file of files) {
    content += readIgnoreFile(file);
  }

  // Add final warning
  content += '\n# ===== END OF GENERATED CONTENT =====\n';
  content += '# **DO NOT EDIT DIRECTLY** - This file is autogenerated by generate-ignores.js\n';
  content += '# To modify these patterns, edit the appropriate source files in .config/filelists/\n';

  return content;
}

/**
 * Writes content to a file if it has changed
 */
function writeIfChanged(filePath, content) {
  try {
    const currentContent = fs.existsSync(filePath) 
      ? fs.readFileSync(filePath, 'utf8') 
      : '';
    
    if (currentContent !== content) {
      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`Updated ${filePath}`);
      return true;
    }
    console.log(`No changes to ${filePath}`);
    return false;
  } catch (err) {
    console.error(`Error writing to ${filePath}:`, err.message);
    return false;
  }
}

// Main execution
function main() {
  console.log('Generating ignore files...');
  
  let anyChanges = false;
  
  // Process each output file configuration
  for (const [outputFile, config] of Object.entries(CONFIG)) {
    const content = generateCombinedContent(config.include);
    const outputPath = path.join(process.cwd(), outputFile);
    anyChanges = writeIfChanged(outputPath, content) || anyChanges;
  }
  
  if (!anyChanges) {
    console.log('No changes detected in any ignore files.');
  }
  
  console.log('Done!');
}

// Run the script
if (require.main === module) {
  main();
}
